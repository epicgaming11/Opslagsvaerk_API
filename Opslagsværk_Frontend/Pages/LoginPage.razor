@page "/login"
@using Blazored.LocalStorage <!--for browser storage-->
@inject HttpClient Http 
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage 

<div class="page-wrapper">

    <div class="headers">
    <h1>Opslagsværk</h1>
    <h3>Opslagsværk – Upload & Showcase Your ProgrammingProjects</h3>
</div>

    <div class="container">
        <!--calls HandleLogin on "submit"-->
        <form @onsubmit="HandleLogin" @onsubmit:preventDefault>
            <div>
                <label for="username">Username:</label>
                <input id="username" @bind="Username" />
            </div>
            <div>
                <label for="password">Password:</label>
                <input id="password" type="password" @bind="Password" />
            </div>
            <button type="submit">Log in</button>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p style="color: #ffffff;">@ErrorMessage</p>
            }
        </form>
    </div>

</div>

@code {
    //these properties store the values entered by the user in the login form.
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";

    private string ErrorMessage { get; set; } = "";

    //This method is called when the user submits the login form.
    //It handles the process of sending the users credentials to the backend and checking the response.
    private async Task HandleLogin()
    {
        Console.WriteLine("Login function started");
        //objects hold username and password from the form.
        var loginData = new
        {
            username = Username,
            hashed_password = Password
        };

        // send the login data to the backend using HTTP POST request.
        //endpoint is "api/User/Login".
        var response = await Http.PostAsJsonAsync("api/User/Login", loginData);

        //Check if response from backend successful.
        if (response.IsSuccessStatusCode)
        {
            //if successful, read the HTTP response body as a LoginResponse object.
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

            //Check if response has a token, and if its empty or null.
            if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Token))
            {
                //save the recieved JWT token in the browers local storage for later use.
                await localStorage.SetItemAsync("authToken", loginResponse.Token);

                //Redirect the user to home page after succesful login.
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                ErrorMessage = "Login failed: Token not received.";
            }
        }
        else
        {
            ErrorMessage = "Login failed.";
        }
    }

    //This class defines the data structure for the response from the backend after login.
    public class LoginResponse
    {
        public string Message { get; set; }
        public string Token { get; set; }
        public int Id { get; set; }
        public int RoleId { get; set; }
    }
}
